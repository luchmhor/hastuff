alias: PV Battery Optimization
description: >-
  Adjust inverter output every 10s to keep grid import/export within specified
  range and between 10:00 and 18:00, dynamically charge the battery around the
  cheapest spot price hour if SOC is below an hourly threshold.
triggers:
  - seconds: /10
    trigger: time_pattern
actions:
  - choose:
      - conditions:
          - >-
            {{ battery_soc > 95 and (states('sensor.ezhi_photovoltaic_power') |
            float) > 0 }}
        sequence:
          - variables:
              pv_power: "{{ states('sensor.ezhi_photovoltaic_power') | float }}"
              new_output: "{{ pv_power - feed_in_offset }}"
          - data:
              entity_id: number.apsystems_ezhi_max_output_power
              value: "{{ new_output }}"
            action: number.set_value
          - data:
              message: >-
                Sub-rule: battery_soc={{ battery_soc }}% >95% and PV={{ pv_power
                }}W, feeding {{ new_output }}W to apartment (offset {{
                feed_in_offset }}W).
              level: info
            action: system_log.write
    default: []
  - choose:
      - conditions:
          - "{{ grid_power > import_threshold }}"
        sequence:
          - variables:
              step: "{{ (((grid_power | abs) / 2) / 10) | round * 10 }}"
              new_output: "{{ [current_output + step, output_max_limit] | min }}"
          - data:
              entity_id: number.apsystems_ezhi_max_output_power
              value: "{{ new_output }}"
            action: number.set_value
          - data:
              message: >-
                Rule1 IMPORT: grid_power={{ grid_power }}W, step={{ step }}W,
                set inverter output to {{ new_output }}W.
              level: info
            action: system_log.write
      - conditions:
          - "{{ grid_power < -export_threshold }}"
        sequence:
          - variables:
              step: "{{ (((grid_power | abs) / 2) / 10) | round * 10 }}"
              new_output: "{{ [current_output - step, output_min_limit] | max }}"
          - data:
              entity_id: number.apsystems_ezhi_max_output_power
              value: "{{ new_output }}"
            action: number.set_value
          - data:
              message: >-
                Rule1 EXPORT: grid_power={{ grid_power }}W, step={{ step }}W,
                set inverter output to {{ new_output }}W.
              level: info
            action: system_log.write
    default:
      - data:
          message: >-
            Rule1 NO CHANGE: grid_power={{ grid_power }}W within [-{{
            export_threshold }},{{ import_threshold }}]W, inverter output
            remains {{ current_output }}W.
          level: info
        action: system_log.write
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ now().hour >= 10 and now().hour <= 18 and now().minute == 0 }}"
          - condition: template
            value_template: |-
              {{ battery_soc < (
                  ((now().hour - 9) * 10) if now().hour <= 14
                  else (50 + (now().hour - 14) * 5)
                ) }}
        sequence:
          - variables:
              threshold: |-
                {{ ((now().hour - 9) * 10) if now().hour <= 14
                   else (50 + (now().hour - 14) * 5) }}
              price_list: "{{ state_attr('sensor.epex_spot_data_price', 'data') }}"
              search_start: "{{ now().replace(minute=0, second=0).isoformat() }}"
              search_end: "{{ now().replace(hour=18, minute=0, second=0).isoformat() }}"
              valid_prices: |-
                {{ price_list
                   | selectattr('start_time', '>=', search_start)
                   | selectattr('end_time', '<=', search_end)
                   | list }}
              cheapest: "{{ valid_prices | min(attribute='price_per_kwh') }}"
              cheapest_hour: "{{ cheapest.start_time[11:13] | int }}"
              charge_start: "{{ [cheapest_hour - 1, now().hour] | max }}"
              wait_hours: "{{ charge_start - now().hour }}"
          - data:
              message: >-
                Rule2: at {{ now().hour }}:00, SOC={{ battery_soc }}%,
                threshold={{ threshold }}%, cheapest price at {{ cheapest_hour
                }}:00, charging starts in {{ wait_hours }}h.
              level: info
            action: system_log.write
          - delay: "{{ wait_hours }}:00:00"
          - data:
              entity_id: number.apsystems_ezhi_max_output_power
              value: "{{ output_min_limit }}"
            action: number.set_value
          - data:
              message: "Charging start: imported at {{ output_min_limit }}W for 3h."
              level: info
            action: system_log.write
          - delay:
              hours: 3
          - data:
              entity_id: number.apsystems_ezhi_max_output_power
              value: "{{ output_max_limit }}"
            action: number.set_value
          - data:
              message: "Charging complete: restored output to {{ output_max_limit }}W."
              level: info
            action: system_log.write
    default:
      - data:
          message: >-
            Rule2 SKIP: at {{ now().hour }}:00, SOC={{ battery_soc }}% â‰¥
            threshold={{ ((now().hour - 9) * 10) if now().hour <= 14 else (50 +
            (now().hour - 14) * 5) }}%, no charging.
          level: info
        action: system_log.write
variables:
  grid_power: "{{ states('sensor.shrdzm_485519e15aae_16_7_0') | float }}"
  battery_soc: "{{ states('sensor.ezhi_battery_state_of_charge') | float }}"
  current_output: "{{ states('number.apsystems_ezhi_max_output_power') | float }}"
  import_threshold: -5
  export_threshold: 5
  output_min_limit: -800
  output_max_limit: 800
  feed_in_offset: 20
mode: single
